{{
  //// Common Parameter Definition
  // Clock Parameters
  
  const sampling_rate={sampling_rate}; // Hz; Sampling rate, should be the same as what you set on the right panel!

  // Burning Pulse Parameters
  const Number_of_burning_pulses = {Number_of_burning_pulses}; //Number of burning pulse repetitions  
  const burning_duration={burning_duration}; //s; burning time 
  const startFreq_burning = (centre_freq_burning-freq_sweeping_burning)/sampling_rate;//Hz; starting frequency of the burning pulse 
  const stopFreq_burning = (centre_freq_burning+freq_sweeping_burning)/sampling_rate;//Hz; ending frequency of the burning pulse 
  const chirpSamples_burning = round(burning_duration*sampling_rate/16)*16;// Calculating sampling points 
  const phase = 0;

  // burning Back Pulse Parameters
  const Number_of_burning_back_pulses = {Number_of_burning_back_pulses}; //Number of burn-back pulse repetitions 
  const burning_back_duration={burning_back_duration}; //s; burning time burn-back
  const startFreq_burning_back = (centre_freq_burning_back-freq_sweeping_burning_back)/sampling_rate;//Hz; starting frequency of the burn-back
  const stopFreq_burning_back = (centre_freq_burning_back+freq_sweeping_burning_back)/sampling_rate;//Hz; ending frequency of the burn-back
  const chirpSamples_burning_back = round(burning_back_duration*sampling_rate/16)*16;// Calculating sampling points 

  // Reading Pulse Parameters
  const reading_duration={reading_duration}; //s; reading-out time
  const startFreq_reading = (centre_freq_reading-freq_sweeping_reading)/sampling_rate;//Hz; starting frequency of the reading-out pulse
  const stopFreq_reading = (centre_freq_reading+freq_sweeping_reading)/sampling_rate;//Hz; ending frequency of the reading-out pulse
  const chirpSamples_reading = round(reading_duration*sampling_rate/16)*16;// Calculating sampling points 
  
  // Rect Pulse Parameters
  const shuffle_duration={shuffle_duration};//s; shufling time
  const startFreq_shuffle = (centre_freq_shuffle-freq_sweeping_shuffle)/sampling_rate;//Hz; starting frequency of the shuffling pulse
  const stopFreq_shuffle = (centre_freq_shuffle+freq_sweeping_shuffle)/sampling_rate;//Hz; ending frequency of the shuffling pulse
  const chirpSamples_shuffle =round(shuffle_duration*sampling_rate/16)*16;// Calculating sampling points 


  //// Waveform Definition

  wave chirpedSine_burning = placeholder(chirpSamples_burning,false,false);
  assignWaveIndex(1,chirpedSine_burning,1);

  wave chirpedSine_burning_back = placeholder(chirpSamples_burning_back,false,false);
  assignWaveIndex(1,chirpedSine_burning_back,2);

  wave chirpedSine_reading = placeholder(chirpedSine_reading,true,false);
  wave w_flat = placeholder(chirpSamples_reading,false,false);
  assignWaveIndex(1,chirpAmplitude_reading,3,w_flat,4,w_flat,10);

  wave chirpedSine_shuffle = placeholder(chirpSamples_shuffle,false,false);
  assignWaveIndex(1,chirpedSine_shuffle,3);

  //// Pulse Sequence

  cvar i;

  for(i = 0; i < Number_of_amplitudes; i++){{
    
    // Burning Pulses
    const delay_00 = 0.3E-3; //s; time delay between repeated burning pulses 
    const sample_delay_00=round(delay_00*sampling_rate/16)*16;

    repeat(Number_of_burning_pulses){{
      playWave(chirpedSine_burning);
      playZero(sample_delay_00);
    }}

    // Wait between burning and burning back pulses
    const delay_01=0.3E-3; //s; time delay between the burning pulses and burn-back
    const sample_delay_01=round(delay_01*sampling_rate/16)*16;
    playZero(sample_delay_01);

    // Burning Back Pulses
    const delay_02 = 0.3E-3; //s; time delay between repeated burn-back pulses
    const sample_delay_02=round(delay_02*sampling_rate/16)*16;

    repeat(Number_of_burning_back_pulses) {{
      playWave(chirpedSine_burning_back);
      playZero(sample_delay_02);
    }}

    // Wait between burning back Stark shift pulses
    const delay_05=1E-3; //s; time delay between the clean and read-out pulses (also, between burn and read-out when testing with no burn-back and clean)
    const sample_delay_05=round(delay_05*sampling_rate/16)*16;
    playZero(sample_delay_05);

    // Reading and Stark shift Pulses
    excecuteTableEntry(i)
    // Wait between readout and shuffle pulses
    const delay_06=20E-3;//s; time delay between the read-out pulse and shuffle pulse
    const sample_delay_06=round(delay_06*sampling_rate/16)*16;
    playZero(sample_delay_06);

    // Shuffle Pulse
    playWave(chirpedSine_shuffle);

    // Wait between shuffle and burning pulses
    const delay_07=40E-3;//s; time delay between the shuffle pulse and burning pulse
    const sample_delay_07=round(delay_07*sampling_rate/16)*16;
    playZero(sample_delay_07);

  }}
}}